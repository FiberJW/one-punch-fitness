// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
"use strict";

var Expo = require("expo");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Colors = require("../../config/Colors.bs.js");
var Moment = require("moment");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");
var Json_decode = require("bs-json/src/Json_decode.js");
var Json_encode = require("bs-json/src/Json_encode.js");
var NPMBindings = require("../../config/NPMBindings.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Container = require("./styled/Container");
var Alert$BsReactNative = require("bs-react-native/src/alert.js");
var Text = require("./styled/Option/Text");
var Knob = require("./styled/Switch/Knob");
var Label = require("./styled/Option/Label");
var Platform$BsReactNative = require("bs-react-native/src/platform.js");
var Container$1 = require("./styled/Option/Container");
var Container$2 = require("./styled/Switch/Container");
var AsyncStorage$BsReactNative = require("bs-react-native/src/asyncStorage.js");
var TouchableOpacity$BsReactNative = require("bs-react-native/src/components/touchableOpacity.js");

function make(children) {
  return ReasonReact.wrapJsForReason(Container.default, {}, children);
}

var Container$3 = /* module */ [/* make */ make];

var Styled = /* module */ [/* Container */ Container$3];

function make$1(children) {
  return ReasonReact.wrapJsForReason(Container$2.default, {}, children);
}

var Container$4 = /* module */ [/* make */ make$1];

function make$2($staropt$star, children) {
  var on = $staropt$star ? $staropt$star[0] : /* false */ 0;
  return ReasonReact.wrapJsForReason(
    Knob.default,
    {
      on: on,
    },
    children
  );
}

var Knob$1 = /* module */ [/* make */ make$2];

var Styled$1 = /* module */ [/* Container */ Container$4, /* Knob */ Knob$1];

var component = ReasonReact.statelessComponent("Switch");

function make$3(value, _) {
  var newrecord = component.slice();
  newrecord[/* render */ 9] = function() {
    return ReasonReact.element(
      /* None */ 0,
      /* None */ 0,
      make$1(
        /* array */ [
          ReasonReact.element(
            /* None */ 0,
            /* None */ 0,
            make$2(/* Some */ [value], /* array */ [])
          ),
        ]
      )
    );
  };
  return newrecord;
}

var Switch = /* module */ [
  /* Styled */ Styled$1,
  /* component */ component,
  /* make */ make$3,
];

function make$4(tint, children) {
  return ReasonReact.wrapJsForReason(
    Container$1.default,
    {
      tint: tint,
    },
    children
  );
}

var Container$5 = /* module */ [/* make */ make$4];

function make$5(children) {
  return ReasonReact.wrapJsForReason(Label.default, {}, children);
}

var Label$1 = /* module */ [/* make */ make$5];

function make$6(children) {
  return ReasonReact.wrapJsForReason(Text.default, {}, children);
}

var Text$1 = /* module */ [/* make */ make$6];

var Styled$2 = /* module */ [
  /* Container */ Container$5,
  /* Label */ Label$1,
  /* Text */ Text$1,
];

var component$1 = ReasonReact.statelessComponent("Option");

function make$7(tint, label, onPress, render, _) {
  var newrecord = component$1.slice();
  newrecord[/* render */ 9] = function() {
    return ReasonReact.element(
      /* None */ 0,
      /* None */ 0,
      TouchableOpacity$BsReactNative.make(
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* Some */ [onPress],
        /* None */ 0,
        /* None */ 0,
        /* None */ 0,
        /* Some */ [0.95],
        /* None */ 0,
        /* None */ 0
      )(
        /* array */ [
          ReasonReact.element(
            /* None */ 0,
            /* None */ 0,
            make$4(
              tint,
              /* array */ [
                ReasonReact.element(
                  /* None */ 0,
                  /* None */ 0,
                  make$5(/* array */ [label])
                ),
                Curry._1(render, /* () */ 0),
              ]
            )
          ),
        ]
      )
    );
  };
  return newrecord;
}

var Option = /* module */ [
  /* Styled */ Styled$2,
  /* component */ component$1,
  /* make */ make$7,
];

function persist(state) {
  var stateAsJson = JSON.stringify(
    Json_encode.object_(
      /* :: */ [
        /* tuple */ [
          "remindersActive",
          Js_boolean.to_js_boolean(state[/* remindersActive */ 0]),
        ],
        /* :: */ [
          /* tuple */ [
            "datePickerVisible",
            Js_boolean.to_js_boolean(state[/* datePickerVisible */ 3]),
          ],
          /* :: */ [
            /* tuple */ [
              "timeSet",
              Js_boolean.to_js_boolean(state[/* timeSet */ 2]),
            ],
            /* :: */ [
              /* tuple */ ["reminderTime", state[/* reminderTime */ 1]],
              /* [] */ 0,
            ],
          ],
        ],
      ]
    )
  );
  AsyncStorage$BsReactNative.setItem(
    "settings",
    stateAsJson,
    /* Some */ [
      function(e) {
        if (e) {
          console.log(e[0]);
          return /* () */ 0;
        } else {
          return /* () */ 0;
        }
      },
    ],
    /* () */ 0
  );
  return /* () */ 0;
}

function hydrate(self) {
  AsyncStorage$BsReactNative.getItem("settings", /* None */ 0, /* () */ 0).then(
    function(json) {
      var tmp;
      if (json) {
        var parsedJson = JSON.parse(json[0]);
        var state_000 = /* remindersActive */ Json_decode.field(
          "remindersActive",
          Json_decode.bool,
          parsedJson
        );
        var state_001 = /* reminderTime */ Json_decode.field(
          "reminderTime",
          Json_decode.string,
          parsedJson
        );
        var state_002 = /* timeSet */ Json_decode.field(
          "timeSet",
          Json_decode.bool,
          parsedJson
        );
        var state_003 = /* datePickerVisible */ Json_decode.field(
          "datePickerVisible",
          Json_decode.bool,
          parsedJson
        );
        var state = /* record */ [state_000, state_001, state_002, state_003];
        Curry._2(
          self[/* reduce */ 1],
          function() {
            return /* Rehydrate */ Block.__(0, [state]);
          },
          /* () */ 0
        );
        tmp = /* () */ 0;
      } else {
        tmp = /* () */ 0;
      }
      return Promise.resolve(tmp);
    }
  );
  return /* NoUpdate */ 0;
}

function cancelNotifications(self, callback) {
  if (Platform$BsReactNative.os !== 0) {
    Expo.Notifications.cancelAllScheduledNotificationsAsync().then(function() {
      return Promise.resolve(
        (Curry._2(
          self[/* reduce */ 1],
          function() {
            return /* UnsetNotification */ 1;
          },
          /* () */ 0
        ),
        Curry._1(callback, /* () */ 0))
      );
    });
    return /* () */ 0;
  } else {
    Expo.Notifications.cancelAllScheduledNotificationsAsync();
    Curry._2(
      self[/* reduce */ 1],
      function() {
        return /* UnsetNotification */ 1;
      },
      /* () */ 0
    );
    return Curry._1(callback, /* () */ 0);
  }
}

var component$2 = ReasonReact.reducerComponent("SettingsScreen");

function make$8() {
  var newrecord = component$2.slice();
  newrecord[/* didMount */ 4] = hydrate;
  newrecord[/* didUpdate */ 5] = function(param) {
    return persist(param[/* newSelf */ 1][/* state */ 2]);
  };
  newrecord[/* render */ 9] = function(self) {
    var match = self[/* state */ 2][/* remindersActive */ 0];
    var match$1 = self[/* state */ 2][/* remindersActive */ 0];
    var tmp;
    if (match$1 !== 0) {
      var match$2 = self[/* state */ 2][/* timeSet */ 2];
      tmp = ReasonReact.element(
        /* None */ 0,
        /* None */ 0,
        make$7(
          match$2 !== 0 ? Colors.status : Colors.disabled,
          "reminder time",
          Curry._1(self[/* reduce */ 1], function() {
            return /* ToggleDatePicker */ 2;
          }),
          function() {
            return ReasonReact.element(
              /* None */ 0,
              /* None */ 0,
              make$6(
                /* array */ [
                  Moment(self[/* state */ 2][/* reminderTime */ 1]).format(
                    "h:mmA"
                  ),
                ]
              )
            );
          },
          /* array */ []
        )
      );
    } else {
      tmp = null;
    }
    return ReasonReact.element(
      /* None */ 0,
      /* None */ 0,
      make(
        /* array */ [
          ReasonReact.element(
            /* None */ 0,
            /* None */ 0,
            make$7(
              match !== 0 ? Colors.start : Colors.disabled,
              "reminders",
              function() {
                if (self[/* state */ 2][/* remindersActive */ 0]) {
                  return cancelNotifications(
                    self,
                    Curry._1(self[/* reduce */ 1], function() {
                      return /* ToggleReminders */ 0;
                    })
                  );
                } else {
                  Expo.Permissions.askAsync(
                    Expo.Permissions.NOTIFICATIONS
                  ).then(function(res) {
                    return Promise.resolve(
                      res.status === "granted"
                        ? Curry._2(
                            self[/* reduce */ 1],
                            function() {
                              return /* ToggleReminders */ 0;
                            },
                            /* () */ 0
                          )
                        : Alert$BsReactNative.alert(
                            "Hey! If you want to remember to change yourself everyday, enable notifications!",
                            /* None */ 0,
                            /* None */ 0,
                            /* None */ 0,
                            /* None */ 0,
                            /* () */ 0
                          )
                    );
                  });
                  return /* () */ 0;
                }
              },
              function() {
                return ReasonReact.element(
                  /* None */ 0,
                  /* None */ 0,
                  make$3(
                    self[/* state */ 2][/* remindersActive */ 0],
                    /* array */ []
                  )
                );
              },
              /* array */ []
            )
          ),
          tmp,
          ReasonReact.element(
            /* None */ 0,
            /* None */ 0,
            NPMBindings.DateTimePicker[/* make */ 0](
              /* Some */ [self[/* state */ 2][/* datePickerVisible */ 3]],
              /* Some */ [
                function(d) {
                  return cancelNotifications(self, function() {
                    var match = +(
                      Moment(d.toUTCString())
                        .toDate()
                        .getTime() < Date.now()
                    );
                    Expo.Notifications.scheduleLocalNotificationAsync(
                      {
                        title: "One Punch Fitness",
                        body: "move forward.",
                      },
                      {
                        time:
                          match !== 0
                            ? Moment(d.toUTCString())
                                .add(1, "days")
                                .toDate()
                                .getTime()
                            : Moment(d.toUTCString())
                                .toDate()
                                .getTime(),
                        repeat: "day",
                      }
                    ).then(function() {
                      return Promise.resolve(
                        Curry._2(
                          self[/* reduce */ 1],
                          function() {
                            return /* SetTime */ Block.__(1, [d.toUTCString()]);
                          },
                          /* () */ 0
                        )
                      );
                    });
                    return /* () */ 0;
                  });
                },
              ],
              /* Some */ [
                Curry._1(self[/* reduce */ 1], function() {
                  return /* ToggleDatePicker */ 2;
                }),
              ],
              /* Some */ ["time"],
              /* Some */ ["Pick a time for your workout reminder"],
              /* array */ []
            )
          ),
        ]
      )
    );
  };
  newrecord[/* initialState */ 10] = function() {
    return /* record */ [
      /* remindersActive : false */ 0,
      /* reminderTime */ new Date().toUTCString(),
      /* timeSet : false */ 0,
      /* datePickerVisible : false */ 0,
    ];
  };
  newrecord[/* reducer */ 12] = function(action, state) {
    if (typeof action === "number") {
      switch (action) {
        case 0:
          return /* Update */ Block.__(0, [
            /* record */ [
              /* remindersActive */ 1 - state[/* remindersActive */ 0],
              /* reminderTime */ state[/* reminderTime */ 1],
              /* timeSet */ state[/* timeSet */ 2],
              /* datePickerVisible */ state[/* datePickerVisible */ 3],
            ],
          ]);
        case 1:
          return /* Update */ Block.__(0, [
            /* record */ [
              /* remindersActive */ state[/* remindersActive */ 0],
              /* reminderTime */ state[/* reminderTime */ 1],
              /* timeSet : false */ 0,
              /* datePickerVisible */ state[/* datePickerVisible */ 3],
            ],
          ]);
        case 2:
          return /* Update */ Block.__(0, [
            /* record */ [
              /* remindersActive */ state[/* remindersActive */ 0],
              /* reminderTime */ state[/* reminderTime */ 1],
              /* timeSet */ state[/* timeSet */ 2],
              /* datePickerVisible */ 1 - state[/* datePickerVisible */ 3],
            ],
          ]);
      }
    } else if (action.tag) {
      return /* Update */ Block.__(0, [
        /* record */ [
          /* remindersActive */ state[/* remindersActive */ 0],
          /* reminderTime */ action[0],
          /* timeSet : true */ 1,
          /* datePickerVisible */ 1 - state[/* datePickerVisible */ 3],
        ],
      ]);
    } else {
      return /* Update */ Block.__(0, [action[0]]);
    }
  };
  return newrecord;
}

var $$default = ReasonReact.wrapReasonForJs(component$2, function() {
  return make$8(/* array */ []);
});

exports.Styled = Styled;
exports.Switch = Switch;
exports.Option = Option;
exports.persist = persist;
exports.hydrate = hydrate;
exports.cancelNotifications = cancelNotifications;
exports.component = component$2;
exports.make = make$8;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* component Not a pure module */
